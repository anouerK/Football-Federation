<?php

namespace App\Controller;

use App\Entity\Arbitre;
use App\Entity\Game;
use App\Entity\User;
use App\Form\ArbitreType;
use App\Entity\Tournoi;
use App\Form\TournoiType;
use App\Repository\ArbitreRepository;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\RequestStack;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\Serializer\Exception\NotEncodableValueException;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;
use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;
use Symfony\Component\Serializer\Serializer;
use Symfony\Component\Serializer\SerializerInterface;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\JsonResponse;
use MercurySeries\FlashyBundle\FlashyNotifier;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Symfony\Component\Validator\Constraints\Json;


class ArbitreController extends AbstractController
{
    public function __construct(RequestStack $requestStack)
    {
        $this->requestStack = $requestStack;
    }
    private $requestStack;
    /**
     * @Route("/arbitre", name="arbitre")
     */
    public function index(): Response
    {
        $session = $this->requestStack->getSession();
        $user = $session->get('user');

        if($user == null )
            return $this->redirectToRoute('login');
        $user =  $this->getDoctrine()->getRepository(User::class)->findOneBy(['id'=>$user[0]]);
        if($user == null )
            return $this->redirectToRoute('login');

        if($user->getRole() == 'client' )
        {
            return $this->redirectToRoute('user');
        }
        return $this->render('arbitre/index.html.twig', [
            'controller_name' => 'ArbitreController',
        ]);
    }
    /**
     * @Route("/detailAr{id}", name="detailAr")
     */
    public function detailAr($id): Response
    {

        //recuperer le repository pour utiliser la fonction findAll()
        $r=$this->getDoctrine()->getRepository(Game::class);
        $games=$r->findAll();
        $r=$this->getDoctrine()->getRepository(Arbitre::class);
        $arbitres=$r->find($id);
        $result = $this->getDoctrine()->getRepository(tournoi::class);
        $tournois = $result->findall();
        return $this->render('arbitre/detailAr.html.twig', [
            'e' => $arbitres,
            'art'=>$arbitres->getGame(),
            'g' =>$games,
            'c' =>$tournois,
        ]);
    }



    ///methode Ajout
    /**
     * @Route("/ajoutAr", name="ajoutAr")
     */

    public function ajoutAr(Request $request,FlashyNotifier $flashy): Response
    {
        //creation une formulaire
        $c=new Arbitre();
        $form=$this->createForm(ArbitreType::class,$c);

        //recuperer les donnees depuis la requette http
        $form->handleRequest($request);
        if($form->isSubmitted()&&$form->isValid())
        {
            $file = $form->get('image')->getData();

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            // moves the file to the directory where brochures are stored
            $file->move(
                $this->getParameter('brochures_directory'),
                $fileName
            );

            $c->setImage($fileName);
            $em=$this->getDoctrine()->getManager();
            $em->persist($c);
            $em->flush();
            $flashy->success('Arbitre ajouté avec succés', 'http://your-awesome-link.com');
            return $this->redirect('afficheAr');
        }
        return $this->render('arbitre/ajoutAr.html.twig',['g' => $form->createView()]);

    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    ///methode affichage
    /**
     * @Route("/afficheAr", name="afficheAr")
     */
    public function afficheAr(): Response
    {
        //recuperer le repository pour utiliser la fonction findAll()
        $r=$this->getDoctrine()->getRepository(Arbitre::class);
        $arbitres=$r->findAll();
        return $this->render('arbitre/afficheAr.html.twig', [
            'e' => $arbitres,
        ]);
    }

    ///methode affichage
    /**
     * @Route("/afficheArF", name="afficheArF")
     */
    public function afficheArF(): Response
    {
        //recuperer le repository pour utiliser la fonction findAll()
        $r=$this->getDoctrine()->getRepository(Game::class);
        $games=$r->findAll();
        $r=$this->getDoctrine()->getRepository(Arbitre::class);
        $arbitres=$r->findAll();
        $result = $this->getDoctrine()->getRepository(tournoi::class);
        $tournois = $result->findall();
        return $this->render('arbitre/afficheArF.html.twig', [
            'e' => $arbitres,
            'g'=> $games,
            'c' =>$tournois,
        ]);
    }


///methode supprimer
    /**
     * @Route("/SuppAr/{id}", name="SuppAr")
     */
    public function SuppAr($id,FlashyNotifier $flashy): Response
    {
        //recuperer le Classroom a supprimer find($id)
        $s=$this->getDoctrine()->getRepository(Arbitre::class);
        $arbitres=$s->find($id);

        //on passe a la supprision
        $em=$this->getDoctrine()->getManager();
        $em->remove($arbitres);
        $em->flush();
        $flashy->error('Arbitre supprimé !!', 'http://your-awesome-link.com');
        return $this->redirectToroute('afficheAr');
        //    return $this->render('classroom/afficheC.html.twig', [
        //    'c' => $classrooms,
        //    ]);
    }

    ///methode modifier
    /**
     * @Route("/modifAr/{id}", name="modifAr")
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function modifAr(Request $request,$id, FlashyNotifier $flashy): Response
    {
        //recuperer le Classroom a supprimer find($id)
        // $c=new Classroom();
        $s=$this->getDoctrine()->getRepository(Arbitre::class);
        $arbitres=$s->find($id);

        $form=$this->createForm(ArbitreType::class,$arbitres);
        $checkout=$form->handleRequest($request);
        if($checkout->isSubmitted()&&$checkout->isValid())
        {
            $file = $form->get('image')->getData();

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            // moves the file to the directory where brochures are stored
            $file->move(
                $this->getParameter('brochures_directory'),
                $fileName
            );

            $arbitres->setImage($fileName);
            $em=$this->getDoctrine()->getManager();
            $em->flush();
            $flashy->info('Arbitre modifié!', 'http://your-awesome-link.com');
            return $this->redirectToRoute('afficheAr');
        }

        return $this->render('arbitre/ajoutAr.html.twig',['g' => $form->createView()]);
    }

    /**
     * @Route("/viewAj", name="viewAj")
     */
    public function viewAj( NormalizerInterface $Normalizer)
    {
        $repo = $this->getDoctrine()->getRepository(Arbitre::class);
        $tournois = $repo->findAll();



        $json=$Normalizer->normalize($tournois,'json',['groups'=>'post : read']);


        return new Response(json_encode($json));

        dump($json);

        die;
    }

    /**
     * @Route("/add/json", name="new_json" )
     */
    public function new_Json(Request $request, SerializerInterface $serializer ,EntityManagerInterface $entityManager)
    {

        $terrain =new Arbitre();
        // $content = $request->getContent();
        try {
            $terrain->getNomA($request->get("nomA"));
            $terrain->getNbe($request->get("nbe"));
            $terrain->getImage($request->get("image"));
            $terrain->getDescrp($request->get("descrp"));


            $entityManager->persist($terrain);
            $entityManager->flush();
            $data= $serializer->serialize($terrain,'json',['groups' => 'post:read']);
            return new Response("Arbitre ajouté avec succés".json_encode($terrain) );
            //return $this->json('terrain ajouté avec succés!' ,201,['groups' => 'terrain']);

        }catch (NotEncodableValueException $e ){
            return $this->json(['status'=>400,'message'=> $e->getMessage()]);
        }

    }

    /**
     * @Route("/addArbitrej", name="addArbitrej")
     */
    public function addArbitrej(Request $request, SerializerInterface  $serializer , EntityManagerInterface $em)
    {
        /*
       $content = $request->getContent();
       $data = $serializer->deserialize($content,Badge::class,'json');
       $em->persist($data);
       $em->flush;
       return new Response('Badge Added sucessfully');
        */
        $em=$this->getDoctrine()->getManager();
        $tournoi=new Arbitre();




        $tournoi->setNomA($request->get("nomA"));
        $tournoi->setNbe($request->get("nbe"));

        $tournoi->setDescrp($request->get("descrp"));
        $tournoi->setImage($request->get("image"));

        $em->persist($tournoi);
        $em->flush();
        $serializer = new Serializer([new ObjectNormalizer()]);
        $formatted = $serializer->normalize($tournoi);
        return new JsonResponse($formatted);
    }



    /**
     * @Route("/update/json", name="update_json",methods={"POST","GET"})
     */
    public function update_Json(Request $request, NormalizerInterface $serializer ,EntityManagerInterface $entityManager)
    {
        $entityManager = $this->getDoctrine()->getManager();
        $terrain=$entityManager->getRepository(Arbitre::class)->find($request->get("id"));

        $terrain->getNomA($request->get("nomA"));
        $terrain->getNbe($request->get("nbe"));
        $terrain->getImage($request->get("image"));
        $terrain->getDescrp($request->get("descrp"));
        $entityManager->flush();
        $data= $serializer->normalize($terrain,'json',['groups' => 'post : read']);
        return new Response("Arbitre modifié avec succés".json_encode($data) );
    }
    /**
     * @Route("/delete/json", name="delete_json" )
     */
    public function delete_Json(Request $request, SerializerInterface $serializer ,EntityManagerInterface $entityManager)
    {

        $entityManager = $this->getDoctrine()->getManager();
        $terrain=$this->getDoctrine()->getManager()->getRepository(Arbitre::class)->find($request->get("id"));
        if($terrain!=null){
            $entityManager->remove($terrain);
            $entityManager->flush();
//            $serializer->deserialize($terrain, Terrain::class,'json');
//            return $this->json('json' ,201,['groups' => 'terrain']);
            $serialize = new Serializer([new ObjectNormalizer()]);
            $formatted = $serialize->normalize("Arbitre  supprimé !");
            return new JsonResponse($formatted);
        }
        return new JsonResponse("id d'arbitre invalide !");


    }


    /**
     * @Route("/deleteArbitree/{id}", name="deleteArbitree")
     * @Method("DELETE")
     */

    public function deleteArbitree(Request $request) {
        $id = $request->get("id");

        $em = $this->getDoctrine()->getManager();
        $reclamation = $em->getRepository(Arbitre::class)->find($id);
        if($reclamation!=null ) {
            $em->remove($reclamation);
            $em->flush();

            $serialize = new Serializer([new ObjectNormalizer()]);
            $formatted = $serialize->normalize("Arbitre a ete supprimee avec success.");
            return new JsonResponse($formatted);

        }
        return new JsonResponse("id Arbitre invalide.");


    }

    /**
     * @Route("/updateArbitreJSON/{id}", name="updateArbitreJSON")
     */
    public function updateArbitreJSON(Request $request, NormalizerInterface $Normalizer,$id){
        $em=$this->getDoctrine()->getManager();
        $event=$em->getRepository(Arbitre::class)->find($id);
        $event->setNomA($request->get("nomA"));
        $event->setNbe($request->get("nbe"));
        $event->setDescrp($request->get("descrp"));
        $event->setImage($request->get("image"));
        $em->flush();
        $jsonContent=$Normalizer->normalize($event,'json',['groups'=>'post : read']);

        return new Response("Informations mises à jour avec succès".json_encode($jsonContent));
    }


}
